module Day10 where

import Control.Monad
import qualified Data.IntSet as I
import Data.List (sortOn, sort)
import Data.Char (toUpper)

type Point = (Int, Int)
type Light = (Point, Point)

answer :: IO ()
answer = do
  si <- getLine
  if map toUpper si == "Q"
    then return ()
    else showBounds si

showBounds :: String -> IO ()
showBounds si = do
  let i = read si :: Int
  let s = sky ds i
  let (x1, y1, x2, y2) = bounds s
  putStrLn "Answer 1:"
  putStrLn "================================="
  print (x2 - x1, y2 - y1)
  printSky s
  putStrLn "================================="
  answer

findMessage :: [Light] -> [Light]
findMessage lts = if hasMessage lts' then lts' else findMessage lts'
  where
    lts' = sky lts 1

encSky :: [Light] -> I.IntSet
encSky = I.fromList . map (encPt . fst)

-- Return true if there is at least one set of 8 points with the same x coordinate 
hasMessage :: [Light] -> Bool
hasMessage = hasLine . sortOn fst . map fst

hasLine :: [Point] -> Bool
hasLine pts | length pts < 8 = False
            | isLine (take 8 pts) = True
            | otherwise = hasLine (tail pts)

isLine :: [Point] -> Bool
isLine ((x,y):pts) = all (==x) (map fst pts) && consecutive (sort (y:map snd pts))

consecutive :: [Int] -> Bool
consecutive [] = True
consecutive (a:[]) = True
consecutive (a:b:xs) = if (a + 1) == b then consecutive (b:xs) else False

printSky :: [Light] -> IO ()
printSky s = do
  let pts = encSky s
  let (minx, miny, maxx, maxy) = bounds s
  forM_ [miny..maxy] $ \y -> 
    print $ fmtRow y minx maxx pts

fmtRow :: Int -> Int -> Int -> I.IntSet -> String
fmtRow y x1 x2 s = map f [x1..x2]
  where
    f x = if encPt (x,y) `I.member` s then '#' else '.'

sky :: [Light] -> Int -> [Light]
sky ls t = map (move t) ls

move :: Int -> Light -> Light
move t ((x,y),(dx,dy)) = ((x + dx * t, y + dy * t), (dx, dy))

bounds :: [Light] -> (Int, Int, Int, Int)
bounds lts = (minimum xs, minimum ys, maximum xs, maximum ys)
  where
    pts = map fst lts
    xs = map fst pts
    ys = map snd pts

encPt :: Point -> Int
encPt (x,y) = x * 1000 + y

decPt :: Int -> Point
decPt i = (i `div` 1000, i `mod` 1000)

ds :: [Light]
ds = ds2

ds1 :: [Light]
ds1 = 
  [ (( 9,  1), ( 0,  2))
  , (( 7,  0), (-1,  0))
  , (( 3, -2), (-1,  1))
  , (( 6, 10), (-2, -1))
  , (( 2, -4), ( 2,  2))
  , ((-6, 10), ( 2, -2))
  , (( 1,  8), ( 1, -1))
  , (( 1,  7), ( 1,  0))
  , ((-3, 11), ( 1, -2))
  , (( 7,  6), (-1, -1))
  , ((-2,  3), ( 1,  0))
  , ((-4,  3), ( 2,  0))
  , ((10, -3), (-1,  1))
  , (( 5, 11), ( 1, -2))
  , (( 4,  7), ( 0, -1))
  , (( 8, -2), ( 0,  1))
  , ((15,  0), (-2,  0))
  , (( 1,  6), ( 1,  0))
  , (( 8,  9), ( 0, -1))
  , (( 3,  3), (-1,  1))
  , (( 0,  5), ( 0, -1))
  , ((-2,  2), ( 2,  0))
  , (( 5, -2), ( 1,  2))
  , (( 1,  4), ( 2,  1))
  , ((-2,  7), ( 2, -2))
  , (( 3,  6), (-1, -1))
  , (( 5,  0), ( 1,  0))
  , ((-6,  0), ( 2,  0))
  , (( 5,  9), ( 1, -2))
  , ((14,  7), (-2,  0))
  , ((-3,  6), ( 2, -1))
  ]

ds2 :: [Light]
ds2 =
  [ (( 54347, -32361), (-5,  3))
  , ((-21463, -32354), ( 2,  3))
  , (( 54347,  32630), (-5, -3))
  , (( 21839,  32628), (-2, -3))
  , ((-21490, -21528), ( 2,  2))
  , (( 54359,  43457), (-5, -4))
  , ((-21470, -10698), ( 2,  1))
  , ((-43100, -21528), ( 4,  2))
  , (( 21842, -21524), (-2,  2))
  , (( 11011, -32358), (-1,  3))
  , ((-10651, -54021), ( 1,  5))
  , ((-10651, -32355), ( 1,  3))
  , (( 43533, -21523), (-4,  2))
  , (( 32700, -43185), (-3,  4))
  , (( 54367,  43459), (-5, -4))
  , (( 32697,  43463), (-3, -4))
  , (( 11043,  43463), (-1, -4))
  , (( 11051, -21531), (-1,  2))
  , ((-21445,  21794), ( 2, -2))
  , (( 43544,  54288), (-4, -5))
  , (( 43528, -21531), (-4,  2))
  , ((-10651,  43463), ( 1, -4))
  , ((-53930,  54294), ( 5, -5))
  , (( 21882, -43187), (-2,  4))
  , (( 32665,  43460), (-3, -4))
  , ((-10646, -43191), ( 1,  4))
  , (( 32709, -21528), (-3,  2))
  , (( 11046,  21792), (-1, -2))
  , ((-53991,  43457), ( 5, -4))
  , ((-53940, -10697), ( 5,  1))
  , (( 43545,  21801), (-4, -2))
  , (( 11043, -32361), (-1,  3))
  , (( 43513,  43463), (-4, -4))
  , ((-10627,  21794), ( 1, -2))
  , (( 32706,  10965), (-3, -1))
  , ((-21497,  21792), ( 2, -2))
  , (( 54329,  54289), (-5, -5))
  , (( 32693,  10961), (-3, -1))
  , (( 43501, -54025), (-4,  5))
  , (( 54372,  21795), (-5, -2))
  , (( 11037,  43463), (-1, -4))
  , (( 43496, -32357), (-4,  3))
  , ((-43147, -21529), ( 4,  2))
  , ((-21442, -21531), ( 2,  2))
  , (( 11056,  10961), (-1, -1))
  , (( 21826,  43455), (-2, -4))
  , (( 43539, -32359), (-4,  3))
  , ((-32313, -54025), ( 3,  5))
  , (( 43490,  54294), (-4, -5))
  , (( 21839,  10970), (-2, -1))
  , (( 21853,  54294), (-2, -5))
  , (( 10996,  10961), (-1, -1))
  , ((-43125, -54025), ( 4,  5))
  , ((-21477, -21529), ( 2,  2))
  , ((-10667,  43463), ( 1, -4))
  , ((-53951,  54289), ( 5, -5))
  , ((-32273, -43187), ( 3,  4))
  , ((-21462, -32355), ( 2,  3))
  , ((-53954,  54286), ( 5, -5))
  , (( 43496,  10970), (-4, -1))
  , ((-32289,  54291), ( 3, -5))
  , (( 21834,  54285), (-2, -5))
  , ((-43120, -54017), ( 4,  5))
  , (( 21834, -21527), (-2,  2))
  , ((-43099, -43185), ( 4,  4))
  , (( 11032, -32355), (-1,  3))
  , (( 54377, -10697), (-5,  1))
  , (( 54351, -10696), (-5,  1))
  , (( 43544, -43193), (-4,  4))
  , ((-53987,  54294), ( 5, -5))
  , ((-43140, -10697), ( 4,  1))
  , (( 32659,  21801), (-3, -2))
  , ((-53935,  21792), ( 5, -2))
  , ((-21493,  54288), ( 2, -5))
  , (( 43504,  32628), (-4, -3))
  , (( 21854, -21524), (-2,  2))
  , (( 21839, -43193), (-2,  4))
  , ((-32271, -10692), ( 3,  1))
  , ((-32313, -10696), ( 3,  1))
  , ((-32288, -54016), ( 3,  5))
  , (( 21826, -10699), (-2,  1))
  , (( 21842, -54025), (-2,  5))
  , ((-32316, -43188), ( 3,  4))
  , (( 32689, -43191), (-3,  4))
  , ((-43160, -54025), ( 4,  5))
  , ((-43139,  43455), ( 4, -4))
  , (( 32714,  43458), (-3, -4))
  , (( 43501,  54293), (-4, -5))
  , ((-21446,  10965), ( 2, -1))
  , (( 43522, -21532), (-4,  2))
  , (( 32677, -43190), (-3,  4))
  , (( 11051,  43462), (-1, -4))
  , ((-32321,  32628), ( 3, -3))
  , ((-53932, -54025), ( 5,  5))
  , ((-10611,  21798), ( 1, -2))
  , ((-32276,  54287), ( 3, -5))
  , (( 21839, -54019), (-2,  5))
  , ((-53975, -54018), ( 5,  5))
  , ((-53978, -21532), ( 5,  2))
  , ((-53959, -43192), ( 5,  4))
  , ((-21458, -10699), ( 2,  1))
  , ((-43158,  21792), ( 4, -2))
  , ((-53983, -32361), ( 5,  3))
  , ((-43120,  10961), ( 4, -1))
  , (( 54367,  10961), (-5, -1))
  , ((-10615, -43194), ( 1,  4))
  , (( 43496, -10698), (-4,  1))
  , ((-10665, -32354), ( 1,  3))
  , ((-21470,  54288), ( 2, -5))
  , (( 11043, -54025), (-1,  5))
  , (( 43504,  43458), (-4, -4))
  , ((-53931,  32623), ( 5, -3))
  , ((-32271,  32627), ( 3, -3))
  , (( 11035,  43462), (-1, -4))
  , (( 10999, -54025), (-1,  5))
  , (( 32662,  10963), (-3, -1))
  , ((-32272,  54289), ( 3, -5))
  , ((-32289,  54286), ( 3, -5))
  , (( 11043, -54023), (-1,  5))
  , (( 21831,  32630), (-2, -3))
  , ((-21498,  43454), ( 2, -4))
  , ((-21449,  43454), ( 2, -4))
  , ((-10631, -43189), ( 1,  4))
  , (( 11051,  54289), (-1, -5))
  , (( 11011, -32360), (-1,  3))
  , ((-21482,  32626), ( 2, -3))
  , ((-32289,  21796), ( 3, -2))
  , (( 10995,  43457), (-1, -4))
  , ((-53982, -21528), ( 5,  2))
  , ((-10662, -21525), ( 1,  2))
  , ((-53954, -43188), ( 5,  4))
  , (( 21834,  21801), (-2, -2))
  , (( 11027,  54292), (-1, -5))
  , (( 21874,  43455), (-2, -4))
  , ((-21488, -43190), ( 2,  4))
  , ((-10647,  54285), ( 1, -5))
  , ((-53955, -54025), ( 5,  5))
  , ((-43123,  43459), ( 4, -4))
  , (( 10995,  32628), (-1, -3))
  , ((-21485,  43457), ( 2, -4))
  , ((-32313, -32354), ( 3,  3))
  , (( 32657, -43190), (-3,  4))
  , (( 10995, -10697), (-1,  1))
  , (( 11044,  54289), (-1, -5))
  , ((-53941, -10701), ( 5,  1))
  , ((-53935,  21792), ( 5, -2))
  , (( 43508, -54021), (-4,  5))
  , ((-43157, -10701), ( 4,  1))
  , ((-21458,  32631), ( 2, -3))
  , (( 21834,  43462), (-2, -4))
  , ((-10611, -21527), ( 1,  2))
  , (( 54347, -43193), (-5,  4))
  , ((-32293, -21532), ( 3,  2))
  , ((-10666, -32359), ( 1,  3))
  , (( 43520,  54286), (-4, -5))
  , (( 54319, -32361), (-5,  3))
  , ((-32326,  10965), ( 3, -1))
  , ((-53955, -21527), ( 5,  2))
  , ((-53939,  54289), ( 5, -5))
  , ((-10640, -32363), ( 1,  3))
  , ((-53987,  43463), ( 5, -4))
  , ((-53978,  54289), ( 5, -5))
  , (( 32708, -54025), (-3,  5))
  , (( 11056,  32623), (-1, -3))
  , ((-43147,  43459), ( 4, -4))
  , ((-32308, -32362), ( 3,  3))
  , ((-53935, -43194), ( 5,  4))
  , (( 11012, -10697), (-1,  1))
  , ((-53930, -21532), ( 5,  2))
  , (( 10995, -54018), (-1,  5))
  , ((-43157,  10970), ( 4, -1))
  , ((-21470, -10698), ( 2,  1))
  , (( 21862, -10693), (-2,  1))
  , ((-32316, -10699), ( 3,  1))
  , (( 32707, -10697), (-3,  1))
  , ((-43107, -21529), ( 4,  2))
  , ((-32324, -10700), ( 3,  1))
  , ((-10639,  54290), ( 1, -5))
  , ((-32289, -21528), ( 3,  2))
  , ((-21449, -32363), ( 2,  3))
  , ((-32321, -54016), ( 3,  5))
  , (( 54340,  32626), (-5, -3))
  , ((-21466,  43458), ( 2, -4))
  , ((-10648,  54285), ( 1, -5))
  , (( 54327, -43190), (-5,  4))
  , ((-53958, -43185), ( 5,  4))
  , (( 32678,  43456), (-3, -4))
  , (( 11007,  10965), (-1, -1))
  , ((-32300,  10961), ( 3, -1))
  , ((-43125,  43459), ( 4, -4))
  , ((-53975,  32630), ( 5, -3))
  , (( 32716, -43185), (-3,  4))
  , (( 32662, -10693), (-3,  1))
  , ((-10667,  54285), ( 1, -5))
  , (( 54347, -32362), (-5,  3))
  , (( 32676,  54289), (-3, -5))
  , (( 11023,  10967), (-1, -1))
  , ((-21482,  32631), ( 2, -3))
  , (( 21876, -10701), (-2,  1))
  , (( 32683, -21523), (-3,  2))
  , (( 32681, -21525), (-3,  2))
  , (( 11011, -32359), (-1,  3))
  , ((-32294,  10961), ( 3, -1))
  , (( 32716, -10697), (-3,  1))
  , (( 21866, -10694), (-2,  1))
  , ((-32312, -43194), ( 3,  4))
  , (( 21871, -32354), (-2,  3))
  , (( 21876,  21796), (-2, -2))
  , ((-43141, -21532), ( 4,  2))
  , ((-43158, -10697), ( 4,  1))
  , (( 43496, -21525), (-4,  2))
  , ((-10651,  43455), ( 1, -4))
  , ((-21466,  21799), ( 2, -2))
  , (( 43488, -10697), (-4,  1))
  , ((-53973,  54289), ( 5, -5))
  , ((-53986, -32358), ( 5,  3))
  , ((-21494,  43454), ( 2, -4))
  , ((-21442,  21796), ( 2, -2))
  , (( 21830,  54289), (-2, -5))
  , ((-43112,  32631), ( 4, -3))
  , (( 43545, -43194), (-4,  4))
  , (( 32682,  21801), (-3, -2))
  , (( 21875,  32627), (-2, -3))
  , (( 43501,  32629), (-4, -3))
  , ((-10639,  21798), ( 1, -2))
  , (( 21860,  10970), (-2, -1))
  , ((-43152, -32358), ( 4,  3))
  , (( 11027, -43190), (-1,  4))
  , (( 11011,  10962), (-1, -1))
  , (( 32715, -21532), (-3,  2))
  , ((-53975,  43456), ( 5, -4))
  , ((-10639,  10965), ( 1, -1))
  , ((-21466,  54289), ( 2, -5))
  , ((-21470, -43188), ( 2,  4))
  , ((-32304, -32354), ( 3,  3))
  , ((-10634, -43194), ( 1,  4))
  , (( 11043, -32355), (-1,  3))
  , ((-53951, -43192), ( 5,  4))
  , (( 32657, -21526), (-3,  2))
  , (( 32713, -43185), (-3,  4))
  , (( 11035, -21523), (-1,  2))
  , (( 21854,  54293), (-2, -5))
  , ((-53957,  43454), ( 5, -4))
  , (( 32713,  54292), (-3, -5))
  , (( 32694, -32358), (-3,  3))
  , (( 11043,  21796), (-1, -2))
  , (( 11000, -32357), (-1,  3))
  , (( 43520, -21525), (-4,  2))
  , ((-43160, -43188), ( 4,  4))
  , (( 11043,  10967), (-1, -1))
  , ((-43117,  32632), ( 4, -3))
  , (( 11051,  43460), (-1, -4))
  , ((-53963,  43461), ( 5, -4))
  , ((-53988,  10965), ( 5, -1))
  , (( 43546,  43454), (-4, -4))
  , (( 32697,  10961), (-3, -1))
  , (( 54338,  54285), (-5, -5))
  , (( 43525,  43461), (-4, -4))
  , (( 43536,  10961), (-4, -1))
  , ((-10639,  43455), ( 1, -4))
  , ((-21458, -10698), ( 2,  1))
  , (( 32714,  54285), (-3, -5))
  , ((-32325, -32359), ( 3,  3))
  , ((-43155,  54290), ( 4, -5))
  , (( 21842,  10967), (-2, -1))
  , ((-21493, -32360), ( 2,  3))
  , ((-43149, -21528), ( 4,  2))
  , (( 10995,  32629), (-1, -3))
  , ((-43158, -21532), ( 4,  2))
  , ((-21493,  32624), ( 2, -3))
  , ((-21441, -21532), ( 2,  2))
  , (( 54351,  21800), (-5, -2))
  , ((-10639, -10694), ( 1,  1))
  , ((-21485,  43458), ( 2, -4))
  , ((-10609,  32623), ( 1, -3))
  , (( 32689, -43192), (-3,  4))
  , (( 11055, -32354), (-1,  3))
  , ((-10651,  43455), ( 1, -4))
  , (( 21874,  32630), (-2, -3))
  , ((-21450, -10698), ( 2,  1))
  , (( 43536, -21529), (-4,  2))
  , ((-43147, -21527), ( 4,  2))
  , ((-43120,  32628), ( 4, -3))
  , (( 32665, -54017), (-3,  5))
  , ((-53946, -21523), ( 5,  2))
  , (( 54363,  10970), (-5, -1))
  , ((-43110, -32363), ( 4,  3))
  , (( 32689, -21526), (-3,  2))
  , ((-53938, -54024), ( 5,  5))
  , ((-53943, -54017), ( 5,  5))
  , ((-10656,  43458), ( 1, -4))
  , (( 54343,  43462), (-5, -4))
  , ((-10627, -32354), ( 1,  3))
  , (( 54369, -10697), (-5,  1))
  , (( 11011,  54287), (-1, -5))
  , ((-10659, -43192), ( 1,  4))
  , (( 11039, -21523), (-1,  2))
  , (( 21826,  43457), (-2, -4))
  , ((-32308,  32624), ( 3, -3))
  , ((-53935, -32361), ( 5,  3))
  , (( 11011,  32630), (-1, -3))
  , ((-43134,  21801), ( 4, -2))
  , ((-43131, -21532), ( 4,  2))
  , ((-32289, -54019), ( 3,  5))
  , (( 21883, -54021), (-2,  5))
  , ((-43148, -21528), ( 4,  2))
  , ((-32289, -32362), ( 3,  3))
  , ((-43108,  32623), ( 4, -3))
  , (( 21868,  32632), (-2, -3))
  , ((-10619,  54287), ( 1, -5))
  , ((-21493,  54288), ( 2, -5))
  , (( 54319,  32631), (-5, -3))
  , (( 54346,  54294), (-5, -5))
  , (( 11032,  54292), (-1, -5))
  , ((-21458,  21798), ( 2, -2))
  , (( 32657,  43463), (-3, -4))
  , (( 11051, -43186), (-1,  4))
  , ((-32281, -43188), ( 3,  4))
  , ((-53943,  21793), ( 5, -2))
  , ((-10611,  43456), ( 1, -4))
  , (( 32676, -43190), (-3,  4))
  , ((-43136,  10969), ( 4, -1))
  , (( 11008,  32630), (-1, -3))
  , (( 54332, -21525), (-5,  2))
  , ((-21494, -32363), ( 2,  3))
  , ((-10639, -21524), ( 1,  2))
  , (( 43499, -10697), (-4,  1))
  , ((-43128, -32360), ( 4,  3))
  , (( 43525, -10692), (-4,  1))
  , (( 11032,  54286), (-1, -5))
  , (( 21834, -54024), (-2,  5))
  , ((-53951,  10964), ( 5, -1))
  , ((-21497, -10692), ( 2,  1))
  , ((-32273, -10695), ( 3,  1))
  , ((-10627,  43454), ( 1, -4))
  , (( 54378,  10970), (-5, -1))
  , ((-10633,  54294), ( 1, -5))
  , ((-10639, -32363), ( 1,  3))
  , ((-53959,  54287), ( 5, -5))
  , (( 11048,  10964), (-1, -1))
  , ((-10649,  10961), ( 1, -1))
  , (( 43524,  43462), (-4, -4))
  , (( 10995,  21801), (-1, -2))
  , (( 43523,  32623), (-4, -3))
  , ((-53932, -32354), ( 5,  3))
  , (( 11008,  54285), (-1, -5))
  , ((-32301,  32627), ( 3, -3))
  , (( 11003, -54021), (-1,  5))
  , (( 21858, -32362), (-2,  3))
  , ((-43128, -32357), ( 4,  3))
  , (( 43504, -21532), (-4,  2))
  , ((-53972,  54289), ( 5, -5))
  , ((-43104,  32627), ( 4, -3))
  , (( 54324,  10966), (-5, -1))
  , ((-21442,  21794), ( 2, -2))
  ]